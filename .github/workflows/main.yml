name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - feature-branch
  pull_request:
    branches:
      - main
      - feature-branch

jobs:
  checkout-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

  setup-python:
    runs-on: ubuntu-latest
    needs: checkout-code
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

  install-dependencies:
    runs-on: ubuntu-latest
    needs: setup-python
    steps:
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  set-pythonpath:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV

  lint:
    runs-on: ubuntu-latest
    needs: set-pythonpath
    steps:
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 src

  test:
    runs-on: ubuntu-latest
    needs: set-pythonpath
    steps:
      - name: Test with pytest
        run: |
          pip install pytest flask-testing
          pytest

  debug-secrets:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Debug Secrets
        run: |
          echo "DOCKER_USERNAME length: ${#DOCKER_USERNAME}"
          echo "DOCKER_PASSWORD length: ${#DOCKER_PASSWORD}"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  docker-login:
    runs-on: ubuntu-latest
    needs: debug-secrets
    steps:
      - name: Log in to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

  build-docker:
    runs-on: ubuntu-latest
    needs: docker-login
    steps:
      - name: Build Docker image
        run: docker build -t mlops59 .

  tag-docker:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
      - name: Tag Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: docker tag mlops59:latest ${DOCKER_USERNAME}/mlops59:latest

  push-docker:
    runs-on: ubuntu-latest
    needs: tag-docker
    steps:
      - name: Push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: docker push ${DOCKER_USERNAME}/mlops59:latest
